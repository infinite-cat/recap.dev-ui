# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
}

type FullGraphStats {
  currentErrors: Int!
  dateTime: String!
  errors: Int!
  invocations: Int!
}

type FunctionCall {
  end: String
  fileName: String!
  functionName: String!
  start: String!
}

type GetTracesResponse {
  hasMore: Boolean!
  offset: Int!
  traces: [Trace!]!
}

type GetUnitErrorsResponse {
  errors: [UnitErrorListitem!]!
  hasMore: Boolean!
  offset: Int!
}

type GetUnitsResponse {
  hasMore: Boolean!
  offset: Int!
  units: [UnitListDetails!]!
}

type Query {
  getError(graphSince: String!, id: String!): UnitErrorDetails
  getErrors(graphSince: String!, offset: Int): GetUnitErrorsResponse!
  getTrace(id: String!): Trace
  getTraces(offset: Int, search: String, unitErrorId: String, unitName: String): GetTracesResponse!
  getUnit(graphSince: String!, unitName: String!): UnitDetails
  getUnits(offset: Int, search: String, since: String!): GetUnitsResponse!
}

type ResourceAccessEvent {
  end: String
  error: String
  request: String!
  resourceIdentifier: String!
  response: String!
  serviceName: String!
  start: String!
  status: String!
}

type Trace {
  duration: Int!
  end: String!
  error: String
  functionCallEvents: [FunctionCall!]!
  id: String!
  request: String!
  resourceAccessEvents: [ResourceAccessEvent!]!
  response: String
  start: String!
  status: String!
  unitName: String!
}

type UnitDetails {
  errorRate: Float
  graphStats: [UnitDetailsGraphStats!]!
  unitName: String!
}

type UnitDetailsGraphStats {
  averageDuration: Float!
  dateTime: String!
  errors: String!
  invocations: String!
}

type UnitErrorDetails {
  graphStats: [FullGraphStats!]!
  id: Int!
  lastEventDateTime: String!
  message: String
  rawError: String!
  type: String!
  unitName: String!
}

type UnitErrorGraphStats {
  dateTime: String!
  value: Int!
}

type UnitErrorListitem {
  graphStats: [UnitErrorGraphStats!]!
  id: Int!
  lastEventDateTime: String!
  message: String
  type: String!
  unitName: String!
}

type UnitListDetails {
  averageDuration: Float
  errorRate: Float
  errors: String!
  invocations: String!
  unitName: String!
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}


scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload
