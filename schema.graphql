# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type FunctionCall {
  end: String
  fileName: String!
  functionName: String!
  start: String!
}

type GetTracesResponse {
  hasMore: Boolean!
  offset: Int!
  traces: [Trace!]!
}

type GetUnitErrorsResponse {
  errors: [UnitErrorListitem!]!
  hasMore: Boolean!
  offset: Int!
}

type GetUnitsResponse {
  hasMore: Boolean!
  offset: Int!
  units: [UnitListDetails!]!
}

type Insight {
  detailsLink: String!
  message: String!
  type: String!
}

type IntegrationTestResult {
  error: String
  success: Boolean!
}

type Mutation {
  setSettings(settings: SettingsInput!): Settings!
  testAwsIntegration: IntegrationTestResult!
  testSlackIntegration(channelId: String!, token: String!): IntegrationTestResult!
}

type Query {
  getError(id: String!): UnitError
  getErrorStats(id: String!, since: String!): [UnitErrorDetailsGraphStats!]!
  getErrors(graphSince: String!, offset: Int): GetUnitErrorsResponse!
  getInsights(since: String!): [Insight!]!
  getNewErrors(since: String!): [UnitError!]!
  getSettings: Settings!
  getTopInvokedUnits(since: String!): [TopInvokedUnit!]!
  getTotalStats(since: String!): TotalStats!
  getTrace(id: String!): Trace
  getTraces(limit: Int, offset: Int, search: String, statuses: [String!], unitErrorId: String, unitName: String): GetTracesResponse!
  getUnit(graphSince: String!, unitName: String!): UnitDetails
  getUnits(offset: Int, orderBy: String, orderDirection: String, search: String, since: String!): GetUnitsResponse!
}

type ResourceAccessEvent {
  end: String
  error: String
  request: String!
  resourceIdentifier: String
  response: String!
  serviceName: String!
  start: String!
  status: String
}

type Settings {
  cleanupAfterDays: Int
  host: String!
  id: Int
  isAwsIntegrationEnabled: Boolean!
  notificationConfigurations: JSON
}

type TopInvokedUnit {
  errors: String!
  estimatedCost: Float
  invocations: String!
  unitName: String!
}

type TotalGraphStats {
  dateTime: String!
  errors: String!
  invocations: String!
}

type TotalStats {
  errorRate: Float
  errors: String!
  graphStats: [TotalGraphStats!]!
  invocations: String!
}

type Trace {
  duration: Int!
  end: String!
  error: String
  externalId: String!
  extraData: String
  functionCallEvents: [FunctionCall!]!
  id: Int!
  logs: String
  request: String!
  resourceAccessEvents: [ResourceAccessEvent!]!
  response: String
  start: String!
  status: String!
  unitName: String!
}

type UnitDetails {
  errorRate: Float
  estimatedCost: Float
  graphStats: [UnitDetailsGraphStats!]!
  unitName: String!
}

type UnitDetailsGraphStats {
  averageDuration: Float
  dateTime: String!
  errors: String!
  invocations: String!
}

type UnitError {
  firstEventDateTime: String!
  id: Int!
  lastEventDateTime: String!
  message: String
  rawError: String!
  type: String!
  unitName: String!
}

type UnitErrorDetailsGraphStats {
  currentErrors: Int!
  dateTime: String!
  errors: Int!
  invocations: Int!
}

type UnitErrorGraphStats {
  dateTime: String!
  value: Int!
}

type UnitErrorListitem {
  graphStats: [UnitErrorGraphStats!]!
  id: Int!
  lastEventDateTime: String!
  message: String
  type: String!
  unitName: String!
}

type UnitListDetails {
  averageDuration: Float
  errorRate: Float
  errors: String!
  estimatedCost: Float
  invocations: String!
  unitName: String!
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

input SettingsInput {
  cleanupAfterDays: Int
  host: String!
  id: Int
  isAwsIntegrationEnabled: Boolean!
  notificationConfigurations: JSON
}


scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload
